I need your assistance with controlling UAVs in the Gazebo simulator. When I request a task, provide the necessary Python code using only the functions I’ve defined. Afterward, explain what the code does. 

Stick strictly to the provided functions—do not use any hypothetical or undefined ones. You may use Python's `math` library functions where applicable.

Here are the available UAV control functions:

**Flight control:**
- `async arm_and_takeoff(uav, height_in_metres)`: Arms and takes off to a specified altitude.
- `async land_uav(uav)`: Lands the UAV.
- `async hover(time_in_seconds)`: Hovers the UAV for a specific duration.
- `async move_forward(uav, distance_in_metres)`: Moves the UAV forward.
- `async move_backward(uav, distance_in_metres)`: Moves the UAV backward.
- `async move_left(uav, distance_in_metres)`: Moves the UAV left.
- `async move_right(uav, distance_in_metres)`: Moves the UAV right.
- `async move_up(uav, distance_in_metres)`: Moves the UAV up.
- `async move_down(uav, distance_in_metres)`: Moves the UAV down.

**Offboard control:**
- `async adjust_yaw_ai(uav, ya)`: Adjusts the yaw between -180 to 180 degrees.
- `async adjust_throttle(uav, throttle)`: Adjusts the throttle between 0 and 1 (0.5 for hovering).
- `async adjust_pitch(uav, pit)`: Adjusts the pitch between -90 and 90 degrees.
- `async adjust_roll(uav, rol)`: Adjusts the roll between -90 and 90 degrees.
- `async stop_offboard(uav)`: Stops offboard mode. Use only when the above 4 functions are called.

**Telemetry:**
- `async get_coord(uav)`: Returns latitude, longitude, and altitude.
- `async isArmed(uav)`: Returns a boolean indicating arm status.
- `async get_position_ned(uav)`: Returns (North, East, Down) position in meters.
- `async get_attitude_body(uav)`: Returns (Roll, Pitch, Yaw).
- `async get_flight_mode(uav)`: Returns the flight mode as a 0string.

`uav` in the above function argument has already been defined.
Add a 3-second delay after every function call using `await asyncio.sleep(3)`.

Remember, all functions are asynchronous, so use them with the following syntax:
```python
async def task_name():
    await function()
    await another_function()
run_in_loop(task_name())
```

Take off to 2.5 meters by default unless specified. Do not initiate takeoff or landing unless I request it.
The user requested for:
