# -*- coding: utf-8 -*-
# DO NOT EDIT! This file is auto-generated from
# https://github.com/mavlink/MAVSDK-Python/tree/main/other/templates/py
from ._base import AsyncBase
from . import core_pb2, core_pb2_grpc
from enum import Enum


class ConnectionState:
    """
     Connection state type.

     Parameters
     ----------
     is_connected : bool
          Whether the vehicle got connected or disconnected

     """

    

    def __init__(
            self,
            is_connected):
        """ Initializes the ConnectionState object """
        self.is_connected = is_connected

    def __eq__(self, to_compare):
        """ Checks if two ConnectionState are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # ConnectionState object
            return \
                (self.is_connected == to_compare.is_connected)

        except AttributeError:
            return False

    def __str__(self):
        """ ConnectionState in string representation """
        struct_repr = ", ".join([
                "is_connected: " + str(self.is_connected)
                ])

        return f"ConnectionState: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcConnectionState):
        """ Translates a gRPC struct to the SDK equivalent """
        return ConnectionState(
                
                rpcConnectionState.is_connected
                )

    def translate_to_rpc(self, rpcConnectionState):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcConnectionState.is_connected = self.is_connected
            
        
        




class Core(AsyncBase):
    """
     Access to the connection state and core configurations

     Generated by dcsdkgen - MAVSDK Core API
    """

    # Plugin name
    name = "Core"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = core_pb2_grpc.CoreServiceStub(channel)

    

    async def connection_state(self):
        """
         Subscribe to 'connection state' updates.

         Yields
         -------
         connection_state : ConnectionState
              Connection state

         
        """

        request = core_pb2.SubscribeConnectionStateRequest()
        connection_state_stream = self._stub.SubscribeConnectionState(request)

        try:
            async for response in connection_state_stream:
                

            
                yield ConnectionState.translate_from_rpc(response.connection_state)
        finally:
            connection_state_stream.cancel()

    async def set_mavlink_timeout(self, timeout_s):
        """
         Set timeout of MAVLink transfers.

         The default timeout used is generally (0.5 seconds) seconds.
         If MAVSDK is used on the same host this timeout can be reduced, while
         if MAVSDK has to communicate over links with high latency it might
         need to be increased to prevent timeouts.

         Parameters
         ----------
         timeout_s : double
              Timeout in seconds

         
        """

        request = core_pb2.SetMavlinkTimeoutRequest()
        request.timeout_s = timeout_s
        response = await self._stub.SetMavlinkTimeout(request)

        