# -*- coding: utf-8 -*-
# DO NOT EDIT! This file is auto-generated from
# https://github.com/mavlink/MAVSDK-Python/tree/main/other/templates/py
from ._base import AsyncBase
from . import ftp_server_pb2, ftp_server_pb2_grpc
from enum import Enum


class FtpServerResult:
    """
     Result type.

     Parameters
     ----------
     result : Result
          Result enum value

     result_str : std::string
          Human-readable English string describing the result

     """

    
    
    class Result(Enum):
        """
         Possible results returned for FTP server requests.

         Values
         ------
         UNKNOWN
              Unknown result

         SUCCESS
              Request succeeded

         DOES_NOT_EXIST
              Directory does not exist

         BUSY
              Operations in progress

         """

        
        UNKNOWN = 0
        SUCCESS = 1
        DOES_NOT_EXIST = 2
        BUSY = 3

        def translate_to_rpc(self):
            if self == FtpServerResult.Result.UNKNOWN:
                return ftp_server_pb2.FtpServerResult.RESULT_UNKNOWN
            if self == FtpServerResult.Result.SUCCESS:
                return ftp_server_pb2.FtpServerResult.RESULT_SUCCESS
            if self == FtpServerResult.Result.DOES_NOT_EXIST:
                return ftp_server_pb2.FtpServerResult.RESULT_DOES_NOT_EXIST
            if self == FtpServerResult.Result.BUSY:
                return ftp_server_pb2.FtpServerResult.RESULT_BUSY

        @staticmethod
        def translate_from_rpc(rpc_enum_value):
            """ Parses a gRPC response """
            if rpc_enum_value == ftp_server_pb2.FtpServerResult.RESULT_UNKNOWN:
                return FtpServerResult.Result.UNKNOWN
            if rpc_enum_value == ftp_server_pb2.FtpServerResult.RESULT_SUCCESS:
                return FtpServerResult.Result.SUCCESS
            if rpc_enum_value == ftp_server_pb2.FtpServerResult.RESULT_DOES_NOT_EXIST:
                return FtpServerResult.Result.DOES_NOT_EXIST
            if rpc_enum_value == ftp_server_pb2.FtpServerResult.RESULT_BUSY:
                return FtpServerResult.Result.BUSY

        def __str__(self):
            return self.name
    

    def __init__(
            self,
            result,
            result_str):
        """ Initializes the FtpServerResult object """
        self.result = result
        self.result_str = result_str

    def __eq__(self, to_compare):
        """ Checks if two FtpServerResult are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # FtpServerResult object
            return \
                (self.result == to_compare.result) and \
                (self.result_str == to_compare.result_str)

        except AttributeError:
            return False

    def __str__(self):
        """ FtpServerResult in string representation """
        struct_repr = ", ".join([
                "result: " + str(self.result),
                "result_str: " + str(self.result_str)
                ])

        return f"FtpServerResult: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcFtpServerResult):
        """ Translates a gRPC struct to the SDK equivalent """
        return FtpServerResult(
                
                FtpServerResult.Result.translate_from_rpc(rpcFtpServerResult.result),
                
                
                rpcFtpServerResult.result_str
                )

    def translate_to_rpc(self, rpcFtpServerResult):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcFtpServerResult.result = self.result.translate_to_rpc()
            
        
        
        
            
        rpcFtpServerResult.result_str = self.result_str
            
        
        



class FtpServerError(Exception):
    """ Raised when a FtpServerResult is a fail code """

    def __init__(self, result, origin, *params):
        self._result = result
        self._origin = origin
        self._params = params

    def __str__(self):
        return f"{self._result.result}: '{self._result.result_str}'; origin: {self._origin}; params: {self._params}"


class FtpServer(AsyncBase):
    """
     Provide files or directories to transfer.

     Generated by dcsdkgen - MAVSDK FtpServer API
    """

    # Plugin name
    name = "FtpServer"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = ftp_server_pb2_grpc.FtpServerServiceStub(channel)

    
    def _extract_result(self, response):
        """ Returns the response status and description """
        return FtpServerResult.translate_from_rpc(response.ftp_server_result)
    

    async def set_root_dir(self, path):
        """
         Set root directory.

         This is the directory that can then be accessed by a client.
         The directory needs to exist when this is called.
         The permissions are the same as the file permission for the user running the server.
         The root directory can't be changed while an FTP process is in progress.

         Parameters
         ----------
         path : std::string
              Absolute path of folder

         Raises
         ------
         FtpServerError
             If the request fails. The error contains the reason for the failure.
        """

        request = ftp_server_pb2.SetRootDirRequest()
        request.path = path
        response = await self._stub.SetRootDir(request)

        
        result = self._extract_result(response)

        if result.result != FtpServerResult.Result.SUCCESS:
            raise FtpServerError(result, "set_root_dir()", path)
        