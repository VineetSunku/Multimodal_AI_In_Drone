# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import component_information_pb2 as component__information_dot_component__information__pb2


class ComponentInformationServiceStub(object):
    """Access component information such as parameters.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AccessFloatParams = channel.unary_unary(
                '/mavsdk.rpc.component_information.ComponentInformationService/AccessFloatParams',
                request_serializer=component__information_dot_component__information__pb2.AccessFloatParamsRequest.SerializeToString,
                response_deserializer=component__information_dot_component__information__pb2.AccessFloatParamsResponse.FromString,
                )
        self.SubscribeFloatParam = channel.unary_stream(
                '/mavsdk.rpc.component_information.ComponentInformationService/SubscribeFloatParam',
                request_serializer=component__information_dot_component__information__pb2.SubscribeFloatParamRequest.SerializeToString,
                response_deserializer=component__information_dot_component__information__pb2.FloatParamResponse.FromString,
                )


class ComponentInformationServiceServicer(object):
    """Access component information such as parameters.
    """

    def AccessFloatParams(self, request, context):
        """
        List available float params.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeFloatParam(self, request, context):
        """
        Subscribe to float param changes/updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComponentInformationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AccessFloatParams': grpc.unary_unary_rpc_method_handler(
                    servicer.AccessFloatParams,
                    request_deserializer=component__information_dot_component__information__pb2.AccessFloatParamsRequest.FromString,
                    response_serializer=component__information_dot_component__information__pb2.AccessFloatParamsResponse.SerializeToString,
            ),
            'SubscribeFloatParam': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeFloatParam,
                    request_deserializer=component__information_dot_component__information__pb2.SubscribeFloatParamRequest.FromString,
                    response_serializer=component__information_dot_component__information__pb2.FloatParamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mavsdk.rpc.component_information.ComponentInformationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ComponentInformationService(object):
    """Access component information such as parameters.
    """

    @staticmethod
    def AccessFloatParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.component_information.ComponentInformationService/AccessFloatParams',
            component__information_dot_component__information__pb2.AccessFloatParamsRequest.SerializeToString,
            component__information_dot_component__information__pb2.AccessFloatParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeFloatParam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.component_information.ComponentInformationService/SubscribeFloatParam',
            component__information_dot_component__information__pb2.SubscribeFloatParamRequest.SerializeToString,
            component__information_dot_component__information__pb2.FloatParamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
