# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import telemetry_pb2 as telemetry_dot_telemetry__pb2


class TelemetryServiceStub(object):
    """
    Allow users to get vehicle telemetry and state information
    (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribePosition = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribePosition',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribePositionRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.PositionResponse.FromString,
                )
        self.SubscribeHome = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeHome',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeHomeRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.HomeResponse.FromString,
                )
        self.SubscribeInAir = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeInAir',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeInAirRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.InAirResponse.FromString,
                )
        self.SubscribeLandedState = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeLandedState',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeLandedStateRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.LandedStateResponse.FromString,
                )
        self.SubscribeArmed = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeArmed',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeArmedRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.ArmedResponse.FromString,
                )
        self.SubscribeVtolState = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeVtolState',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeVtolStateRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.VtolStateResponse.FromString,
                )
        self.SubscribeAttitudeQuaternion = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeAttitudeQuaternionRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.AttitudeQuaternionResponse.FromString,
                )
        self.SubscribeAttitudeEuler = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeAttitudeEulerRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.AttitudeEulerResponse.FromString,
                )
        self.SubscribeAttitudeAngularVelocityBody = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeAngularVelocityBody',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeAttitudeAngularVelocityBodyRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.AttitudeAngularVelocityBodyResponse.FromString,
                )
        self.SubscribeCameraAttitudeQuaternion = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeCameraAttitudeQuaternionRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.CameraAttitudeQuaternionResponse.FromString,
                )
        self.SubscribeCameraAttitudeEuler = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeCameraAttitudeEulerRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.CameraAttitudeEulerResponse.FromString,
                )
        self.SubscribeVelocityNed = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeVelocityNed',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeVelocityNedRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.VelocityNedResponse.FromString,
                )
        self.SubscribeGpsInfo = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeGpsInfo',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeGpsInfoRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.GpsInfoResponse.FromString,
                )
        self.SubscribeRawGps = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeRawGps',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeRawGpsRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.RawGpsResponse.FromString,
                )
        self.SubscribeBattery = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeBattery',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeBatteryRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.BatteryResponse.FromString,
                )
        self.SubscribeFlightMode = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeFlightMode',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeFlightModeRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.FlightModeResponse.FromString,
                )
        self.SubscribeHealth = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealth',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeHealthRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.HealthResponse.FromString,
                )
        self.SubscribeRcStatus = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeRcStatus',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeRcStatusRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.RcStatusResponse.FromString,
                )
        self.SubscribeStatusText = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeStatusText',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeStatusTextRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.StatusTextResponse.FromString,
                )
        self.SubscribeActuatorControlTarget = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorControlTarget',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeActuatorControlTargetRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.ActuatorControlTargetResponse.FromString,
                )
        self.SubscribeActuatorOutputStatus = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorOutputStatus',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeActuatorOutputStatusRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.ActuatorOutputStatusResponse.FromString,
                )
        self.SubscribeOdometry = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeOdometry',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeOdometryRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.OdometryResponse.FromString,
                )
        self.SubscribePositionVelocityNed = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribePositionVelocityNed',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribePositionVelocityNedRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.PositionVelocityNedResponse.FromString,
                )
        self.SubscribeGroundTruth = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeGroundTruth',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeGroundTruthRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.GroundTruthResponse.FromString,
                )
        self.SubscribeFixedwingMetrics = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeFixedwingMetrics',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeFixedwingMetricsRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.FixedwingMetricsResponse.FromString,
                )
        self.SubscribeImu = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeImu',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeImuRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.ImuResponse.FromString,
                )
        self.SubscribeScaledImu = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeScaledImu',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeScaledImuRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.ScaledImuResponse.FromString,
                )
        self.SubscribeRawImu = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeRawImu',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeRawImuRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.RawImuResponse.FromString,
                )
        self.SubscribeHealthAllOk = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealthAllOk',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeHealthAllOkRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.HealthAllOkResponse.FromString,
                )
        self.SubscribeUnixEpochTime = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeUnixEpochTime',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeUnixEpochTimeRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.UnixEpochTimeResponse.FromString,
                )
        self.SubscribeDistanceSensor = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeDistanceSensor',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeDistanceSensorRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.DistanceSensorResponse.FromString,
                )
        self.SubscribeScaledPressure = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeScaledPressure',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeScaledPressureRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.ScaledPressureResponse.FromString,
                )
        self.SubscribeHeading = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeHeading',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeHeadingRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.HeadingResponse.FromString,
                )
        self.SubscribeAltitude = channel.unary_stream(
                '/mavsdk.rpc.telemetry.TelemetryService/SubscribeAltitude',
                request_serializer=telemetry_dot_telemetry__pb2.SubscribeAltitudeRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.AltitudeResponse.FromString,
                )
        self.SetRatePosition = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRatePosition',
                request_serializer=telemetry_dot_telemetry__pb2.SetRatePositionRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRatePositionResponse.FromString,
                )
        self.SetRateHome = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateHome',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateHomeRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateHomeResponse.FromString,
                )
        self.SetRateInAir = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateInAir',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateInAirRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateInAirResponse.FromString,
                )
        self.SetRateLandedState = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateLandedState',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateLandedStateRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateLandedStateResponse.FromString,
                )
        self.SetRateVtolState = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateVtolState',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateVtolStateRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateVtolStateResponse.FromString,
                )
        self.SetRateAttitudeQuaternion = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateAttitudeQuaternion',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateAttitudeQuaternionRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateAttitudeQuaternionResponse.FromString,
                )
        self.SetRateAttitudeEuler = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateAttitudeEuler',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateAttitudeEulerRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateAttitudeEulerResponse.FromString,
                )
        self.SetRateCameraAttitude = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateCameraAttitude',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateCameraAttitudeRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateCameraAttitudeResponse.FromString,
                )
        self.SetRateVelocityNed = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateVelocityNed',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateVelocityNedRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateVelocityNedResponse.FromString,
                )
        self.SetRateGpsInfo = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateGpsInfo',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateGpsInfoRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateGpsInfoResponse.FromString,
                )
        self.SetRateBattery = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateBattery',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateBatteryRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateBatteryResponse.FromString,
                )
        self.SetRateRcStatus = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateRcStatus',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateRcStatusRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateRcStatusResponse.FromString,
                )
        self.SetRateActuatorControlTarget = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorControlTarget',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateActuatorControlTargetRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateActuatorControlTargetResponse.FromString,
                )
        self.SetRateActuatorOutputStatus = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorOutputStatus',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateActuatorOutputStatusRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateActuatorOutputStatusResponse.FromString,
                )
        self.SetRateOdometry = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateOdometry',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateOdometryRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateOdometryResponse.FromString,
                )
        self.SetRatePositionVelocityNed = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRatePositionVelocityNed',
                request_serializer=telemetry_dot_telemetry__pb2.SetRatePositionVelocityNedRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRatePositionVelocityNedResponse.FromString,
                )
        self.SetRateGroundTruth = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateGroundTruth',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateGroundTruthRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateGroundTruthResponse.FromString,
                )
        self.SetRateFixedwingMetrics = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateFixedwingMetrics',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateFixedwingMetricsRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateFixedwingMetricsResponse.FromString,
                )
        self.SetRateImu = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateImu',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateImuRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateImuResponse.FromString,
                )
        self.SetRateScaledImu = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateScaledImu',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateScaledImuRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateScaledImuResponse.FromString,
                )
        self.SetRateRawImu = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateRawImu',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateRawImuRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateRawImuResponse.FromString,
                )
        self.SetRateUnixEpochTime = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateUnixEpochTime',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateUnixEpochTimeRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateUnixEpochTimeResponse.FromString,
                )
        self.SetRateDistanceSensor = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateDistanceSensor',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateDistanceSensorRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateDistanceSensorResponse.FromString,
                )
        self.SetRateAltitude = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/SetRateAltitude',
                request_serializer=telemetry_dot_telemetry__pb2.SetRateAltitudeRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.SetRateAltitudeResponse.FromString,
                )
        self.GetGpsGlobalOrigin = channel.unary_unary(
                '/mavsdk.rpc.telemetry.TelemetryService/GetGpsGlobalOrigin',
                request_serializer=telemetry_dot_telemetry__pb2.GetGpsGlobalOriginRequest.SerializeToString,
                response_deserializer=telemetry_dot_telemetry__pb2.GetGpsGlobalOriginResponse.FromString,
                )


class TelemetryServiceServicer(object):
    """
    Allow users to get vehicle telemetry and state information
    (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
    """

    def SubscribePosition(self, request, context):
        """Subscribe to 'position' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeHome(self, request, context):
        """Subscribe to 'home position' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeInAir(self, request, context):
        """Subscribe to in-air updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeLandedState(self, request, context):
        """Subscribe to landed state updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeArmed(self, request, context):
        """Subscribe to armed updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeVtolState(self, request, context):
        """subscribe to vtol state Updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeAttitudeQuaternion(self, request, context):
        """Subscribe to 'attitude' updates (quaternion).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeAttitudeEuler(self, request, context):
        """Subscribe to 'attitude' updates (Euler).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeAttitudeAngularVelocityBody(self, request, context):
        """Subscribe to 'attitude' updates (angular velocity)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeCameraAttitudeQuaternion(self, request, context):
        """Subscribe to 'camera attitude' updates (quaternion).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeCameraAttitudeEuler(self, request, context):
        """Subscribe to 'camera attitude' updates (Euler).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeVelocityNed(self, request, context):
        """Subscribe to 'ground speed' updates (NED).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeGpsInfo(self, request, context):
        """Subscribe to 'GPS info' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeRawGps(self, request, context):
        """Subscribe to 'Raw GPS' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeBattery(self, request, context):
        """Subscribe to 'battery' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeFlightMode(self, request, context):
        """Subscribe to 'flight mode' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeHealth(self, request, context):
        """Subscribe to 'health' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeRcStatus(self, request, context):
        """Subscribe to 'RC status' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeStatusText(self, request, context):
        """Subscribe to 'status text' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeActuatorControlTarget(self, request, context):
        """Subscribe to 'actuator control target' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeActuatorOutputStatus(self, request, context):
        """Subscribe to 'actuator output status' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeOdometry(self, request, context):
        """Subscribe to 'odometry' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribePositionVelocityNed(self, request, context):
        """Subscribe to 'position velocity' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeGroundTruth(self, request, context):
        """Subscribe to 'ground truth' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeFixedwingMetrics(self, request, context):
        """Subscribe to 'fixedwing metrics' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeImu(self, request, context):
        """Subscribe to 'IMU' updates (in SI units in NED body frame).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeScaledImu(self, request, context):
        """Subscribe to 'Scaled IMU' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeRawImu(self, request, context):
        """Subscribe to 'Raw IMU' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeHealthAllOk(self, request, context):
        """Subscribe to 'HealthAllOk' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeUnixEpochTime(self, request, context):
        """Subscribe to 'unix epoch time' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeDistanceSensor(self, request, context):
        """Subscribe to 'Distance Sensor' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeScaledPressure(self, request, context):
        """Subscribe to 'Scaled Pressure' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeHeading(self, request, context):
        """Subscribe to 'Heading' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeAltitude(self, request, context):
        """Subscribe to 'Altitude' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRatePosition(self, request, context):
        """Set rate to 'position' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateHome(self, request, context):
        """Set rate to 'home position' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateInAir(self, request, context):
        """Set rate to in-air updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateLandedState(self, request, context):
        """Set rate to landed state updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateVtolState(self, request, context):
        """Set rate to VTOL state updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateAttitudeQuaternion(self, request, context):
        """Set rate to 'attitude euler angle' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateAttitudeEuler(self, request, context):
        """Set rate to 'attitude quaternion' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateCameraAttitude(self, request, context):
        """Set rate of camera attitude updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateVelocityNed(self, request, context):
        """Set rate to 'ground speed' updates (NED).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateGpsInfo(self, request, context):
        """Set rate to 'GPS info' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateBattery(self, request, context):
        """Set rate to 'battery' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateRcStatus(self, request, context):
        """Set rate to 'RC status' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateActuatorControlTarget(self, request, context):
        """Set rate to 'actuator control target' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateActuatorOutputStatus(self, request, context):
        """Set rate to 'actuator output status' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateOdometry(self, request, context):
        """Set rate to 'odometry' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRatePositionVelocityNed(self, request, context):
        """Set rate to 'position velocity' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateGroundTruth(self, request, context):
        """Set rate to 'ground truth' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateFixedwingMetrics(self, request, context):
        """Set rate to 'fixedwing metrics' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateImu(self, request, context):
        """Set rate to 'IMU' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateScaledImu(self, request, context):
        """Set rate to 'Scaled IMU' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateRawImu(self, request, context):
        """Set rate to 'Raw IMU' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateUnixEpochTime(self, request, context):
        """Set rate to 'unix epoch time' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateDistanceSensor(self, request, context):
        """Set rate to 'Distance Sensor' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRateAltitude(self, request, context):
        """Set rate to 'Altitude' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGpsGlobalOrigin(self, request, context):
        """Get the GPS location of where the estimator has been initialized.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TelemetryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribePosition': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribePosition,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribePositionRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.PositionResponse.SerializeToString,
            ),
            'SubscribeHome': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeHome,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeHomeRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.HomeResponse.SerializeToString,
            ),
            'SubscribeInAir': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeInAir,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeInAirRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.InAirResponse.SerializeToString,
            ),
            'SubscribeLandedState': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeLandedState,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeLandedStateRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.LandedStateResponse.SerializeToString,
            ),
            'SubscribeArmed': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeArmed,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeArmedRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.ArmedResponse.SerializeToString,
            ),
            'SubscribeVtolState': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeVtolState,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeVtolStateRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.VtolStateResponse.SerializeToString,
            ),
            'SubscribeAttitudeQuaternion': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeAttitudeQuaternion,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeAttitudeQuaternionRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.AttitudeQuaternionResponse.SerializeToString,
            ),
            'SubscribeAttitudeEuler': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeAttitudeEuler,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeAttitudeEulerRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.AttitudeEulerResponse.SerializeToString,
            ),
            'SubscribeAttitudeAngularVelocityBody': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeAttitudeAngularVelocityBody,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeAttitudeAngularVelocityBodyRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.AttitudeAngularVelocityBodyResponse.SerializeToString,
            ),
            'SubscribeCameraAttitudeQuaternion': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeCameraAttitudeQuaternion,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeCameraAttitudeQuaternionRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.CameraAttitudeQuaternionResponse.SerializeToString,
            ),
            'SubscribeCameraAttitudeEuler': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeCameraAttitudeEuler,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeCameraAttitudeEulerRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.CameraAttitudeEulerResponse.SerializeToString,
            ),
            'SubscribeVelocityNed': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeVelocityNed,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeVelocityNedRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.VelocityNedResponse.SerializeToString,
            ),
            'SubscribeGpsInfo': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeGpsInfo,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeGpsInfoRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.GpsInfoResponse.SerializeToString,
            ),
            'SubscribeRawGps': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeRawGps,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeRawGpsRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.RawGpsResponse.SerializeToString,
            ),
            'SubscribeBattery': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeBattery,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeBatteryRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.BatteryResponse.SerializeToString,
            ),
            'SubscribeFlightMode': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeFlightMode,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeFlightModeRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.FlightModeResponse.SerializeToString,
            ),
            'SubscribeHealth': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeHealth,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeHealthRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.HealthResponse.SerializeToString,
            ),
            'SubscribeRcStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeRcStatus,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeRcStatusRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.RcStatusResponse.SerializeToString,
            ),
            'SubscribeStatusText': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeStatusText,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeStatusTextRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.StatusTextResponse.SerializeToString,
            ),
            'SubscribeActuatorControlTarget': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeActuatorControlTarget,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeActuatorControlTargetRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.ActuatorControlTargetResponse.SerializeToString,
            ),
            'SubscribeActuatorOutputStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeActuatorOutputStatus,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeActuatorOutputStatusRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.ActuatorOutputStatusResponse.SerializeToString,
            ),
            'SubscribeOdometry': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeOdometry,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeOdometryRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.OdometryResponse.SerializeToString,
            ),
            'SubscribePositionVelocityNed': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribePositionVelocityNed,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribePositionVelocityNedRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.PositionVelocityNedResponse.SerializeToString,
            ),
            'SubscribeGroundTruth': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeGroundTruth,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeGroundTruthRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.GroundTruthResponse.SerializeToString,
            ),
            'SubscribeFixedwingMetrics': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeFixedwingMetrics,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeFixedwingMetricsRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.FixedwingMetricsResponse.SerializeToString,
            ),
            'SubscribeImu': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeImu,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeImuRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.ImuResponse.SerializeToString,
            ),
            'SubscribeScaledImu': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeScaledImu,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeScaledImuRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.ScaledImuResponse.SerializeToString,
            ),
            'SubscribeRawImu': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeRawImu,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeRawImuRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.RawImuResponse.SerializeToString,
            ),
            'SubscribeHealthAllOk': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeHealthAllOk,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeHealthAllOkRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.HealthAllOkResponse.SerializeToString,
            ),
            'SubscribeUnixEpochTime': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeUnixEpochTime,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeUnixEpochTimeRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.UnixEpochTimeResponse.SerializeToString,
            ),
            'SubscribeDistanceSensor': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeDistanceSensor,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeDistanceSensorRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.DistanceSensorResponse.SerializeToString,
            ),
            'SubscribeScaledPressure': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeScaledPressure,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeScaledPressureRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.ScaledPressureResponse.SerializeToString,
            ),
            'SubscribeHeading': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeHeading,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeHeadingRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.HeadingResponse.SerializeToString,
            ),
            'SubscribeAltitude': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeAltitude,
                    request_deserializer=telemetry_dot_telemetry__pb2.SubscribeAltitudeRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.AltitudeResponse.SerializeToString,
            ),
            'SetRatePosition': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRatePosition,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRatePositionRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRatePositionResponse.SerializeToString,
            ),
            'SetRateHome': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateHome,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateHomeRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateHomeResponse.SerializeToString,
            ),
            'SetRateInAir': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateInAir,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateInAirRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateInAirResponse.SerializeToString,
            ),
            'SetRateLandedState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateLandedState,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateLandedStateRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateLandedStateResponse.SerializeToString,
            ),
            'SetRateVtolState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateVtolState,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateVtolStateRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateVtolStateResponse.SerializeToString,
            ),
            'SetRateAttitudeQuaternion': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateAttitudeQuaternion,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateAttitudeQuaternionRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateAttitudeQuaternionResponse.SerializeToString,
            ),
            'SetRateAttitudeEuler': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateAttitudeEuler,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateAttitudeEulerRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateAttitudeEulerResponse.SerializeToString,
            ),
            'SetRateCameraAttitude': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateCameraAttitude,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateCameraAttitudeRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateCameraAttitudeResponse.SerializeToString,
            ),
            'SetRateVelocityNed': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateVelocityNed,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateVelocityNedRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateVelocityNedResponse.SerializeToString,
            ),
            'SetRateGpsInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateGpsInfo,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateGpsInfoRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateGpsInfoResponse.SerializeToString,
            ),
            'SetRateBattery': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateBattery,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateBatteryRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateBatteryResponse.SerializeToString,
            ),
            'SetRateRcStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateRcStatus,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateRcStatusRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateRcStatusResponse.SerializeToString,
            ),
            'SetRateActuatorControlTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateActuatorControlTarget,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateActuatorControlTargetRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateActuatorControlTargetResponse.SerializeToString,
            ),
            'SetRateActuatorOutputStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateActuatorOutputStatus,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateActuatorOutputStatusRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateActuatorOutputStatusResponse.SerializeToString,
            ),
            'SetRateOdometry': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateOdometry,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateOdometryRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateOdometryResponse.SerializeToString,
            ),
            'SetRatePositionVelocityNed': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRatePositionVelocityNed,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRatePositionVelocityNedRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRatePositionVelocityNedResponse.SerializeToString,
            ),
            'SetRateGroundTruth': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateGroundTruth,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateGroundTruthRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateGroundTruthResponse.SerializeToString,
            ),
            'SetRateFixedwingMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateFixedwingMetrics,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateFixedwingMetricsRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateFixedwingMetricsResponse.SerializeToString,
            ),
            'SetRateImu': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateImu,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateImuRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateImuResponse.SerializeToString,
            ),
            'SetRateScaledImu': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateScaledImu,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateScaledImuRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateScaledImuResponse.SerializeToString,
            ),
            'SetRateRawImu': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateRawImu,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateRawImuRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateRawImuResponse.SerializeToString,
            ),
            'SetRateUnixEpochTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateUnixEpochTime,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateUnixEpochTimeRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateUnixEpochTimeResponse.SerializeToString,
            ),
            'SetRateDistanceSensor': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateDistanceSensor,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateDistanceSensorRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateDistanceSensorResponse.SerializeToString,
            ),
            'SetRateAltitude': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRateAltitude,
                    request_deserializer=telemetry_dot_telemetry__pb2.SetRateAltitudeRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.SetRateAltitudeResponse.SerializeToString,
            ),
            'GetGpsGlobalOrigin': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGpsGlobalOrigin,
                    request_deserializer=telemetry_dot_telemetry__pb2.GetGpsGlobalOriginRequest.FromString,
                    response_serializer=telemetry_dot_telemetry__pb2.GetGpsGlobalOriginResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mavsdk.rpc.telemetry.TelemetryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TelemetryService(object):
    """
    Allow users to get vehicle telemetry and state information
    (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
    """

    @staticmethod
    def SubscribePosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribePosition',
            telemetry_dot_telemetry__pb2.SubscribePositionRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.PositionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeHome(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeHome',
            telemetry_dot_telemetry__pb2.SubscribeHomeRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.HomeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeInAir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeInAir',
            telemetry_dot_telemetry__pb2.SubscribeInAirRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.InAirResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeLandedState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeLandedState',
            telemetry_dot_telemetry__pb2.SubscribeLandedStateRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.LandedStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeArmed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeArmed',
            telemetry_dot_telemetry__pb2.SubscribeArmedRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.ArmedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeVtolState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeVtolState',
            telemetry_dot_telemetry__pb2.SubscribeVtolStateRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.VtolStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeAttitudeQuaternion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion',
            telemetry_dot_telemetry__pb2.SubscribeAttitudeQuaternionRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.AttitudeQuaternionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeAttitudeEuler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler',
            telemetry_dot_telemetry__pb2.SubscribeAttitudeEulerRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.AttitudeEulerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeAttitudeAngularVelocityBody(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeAngularVelocityBody',
            telemetry_dot_telemetry__pb2.SubscribeAttitudeAngularVelocityBodyRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.AttitudeAngularVelocityBodyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeCameraAttitudeQuaternion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion',
            telemetry_dot_telemetry__pb2.SubscribeCameraAttitudeQuaternionRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.CameraAttitudeQuaternionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeCameraAttitudeEuler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler',
            telemetry_dot_telemetry__pb2.SubscribeCameraAttitudeEulerRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.CameraAttitudeEulerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeVelocityNed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeVelocityNed',
            telemetry_dot_telemetry__pb2.SubscribeVelocityNedRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.VelocityNedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeGpsInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeGpsInfo',
            telemetry_dot_telemetry__pb2.SubscribeGpsInfoRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.GpsInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeRawGps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeRawGps',
            telemetry_dot_telemetry__pb2.SubscribeRawGpsRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.RawGpsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeBattery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeBattery',
            telemetry_dot_telemetry__pb2.SubscribeBatteryRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.BatteryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeFlightMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeFlightMode',
            telemetry_dot_telemetry__pb2.SubscribeFlightModeRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.FlightModeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealth',
            telemetry_dot_telemetry__pb2.SubscribeHealthRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeRcStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeRcStatus',
            telemetry_dot_telemetry__pb2.SubscribeRcStatusRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.RcStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeStatusText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeStatusText',
            telemetry_dot_telemetry__pb2.SubscribeStatusTextRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.StatusTextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeActuatorControlTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorControlTarget',
            telemetry_dot_telemetry__pb2.SubscribeActuatorControlTargetRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.ActuatorControlTargetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeActuatorOutputStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorOutputStatus',
            telemetry_dot_telemetry__pb2.SubscribeActuatorOutputStatusRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.ActuatorOutputStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeOdometry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeOdometry',
            telemetry_dot_telemetry__pb2.SubscribeOdometryRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.OdometryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribePositionVelocityNed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribePositionVelocityNed',
            telemetry_dot_telemetry__pb2.SubscribePositionVelocityNedRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.PositionVelocityNedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeGroundTruth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeGroundTruth',
            telemetry_dot_telemetry__pb2.SubscribeGroundTruthRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.GroundTruthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeFixedwingMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeFixedwingMetrics',
            telemetry_dot_telemetry__pb2.SubscribeFixedwingMetricsRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.FixedwingMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeImu',
            telemetry_dot_telemetry__pb2.SubscribeImuRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.ImuResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeScaledImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeScaledImu',
            telemetry_dot_telemetry__pb2.SubscribeScaledImuRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.ScaledImuResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeRawImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeRawImu',
            telemetry_dot_telemetry__pb2.SubscribeRawImuRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.RawImuResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeHealthAllOk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealthAllOk',
            telemetry_dot_telemetry__pb2.SubscribeHealthAllOkRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.HealthAllOkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeUnixEpochTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeUnixEpochTime',
            telemetry_dot_telemetry__pb2.SubscribeUnixEpochTimeRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.UnixEpochTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeDistanceSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeDistanceSensor',
            telemetry_dot_telemetry__pb2.SubscribeDistanceSensorRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.DistanceSensorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeScaledPressure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeScaledPressure',
            telemetry_dot_telemetry__pb2.SubscribeScaledPressureRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.ScaledPressureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeHeading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeHeading',
            telemetry_dot_telemetry__pb2.SubscribeHeadingRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.HeadingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeAltitude(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SubscribeAltitude',
            telemetry_dot_telemetry__pb2.SubscribeAltitudeRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.AltitudeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRatePosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRatePosition',
            telemetry_dot_telemetry__pb2.SetRatePositionRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRatePositionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateHome(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateHome',
            telemetry_dot_telemetry__pb2.SetRateHomeRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateHomeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateInAir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateInAir',
            telemetry_dot_telemetry__pb2.SetRateInAirRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateInAirResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateLandedState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateLandedState',
            telemetry_dot_telemetry__pb2.SetRateLandedStateRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateLandedStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateVtolState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateVtolState',
            telemetry_dot_telemetry__pb2.SetRateVtolStateRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateVtolStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateAttitudeQuaternion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateAttitudeQuaternion',
            telemetry_dot_telemetry__pb2.SetRateAttitudeQuaternionRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateAttitudeQuaternionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateAttitudeEuler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateAttitudeEuler',
            telemetry_dot_telemetry__pb2.SetRateAttitudeEulerRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateAttitudeEulerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateCameraAttitude(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateCameraAttitude',
            telemetry_dot_telemetry__pb2.SetRateCameraAttitudeRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateCameraAttitudeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateVelocityNed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateVelocityNed',
            telemetry_dot_telemetry__pb2.SetRateVelocityNedRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateVelocityNedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateGpsInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateGpsInfo',
            telemetry_dot_telemetry__pb2.SetRateGpsInfoRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateGpsInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateBattery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateBattery',
            telemetry_dot_telemetry__pb2.SetRateBatteryRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateBatteryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateRcStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateRcStatus',
            telemetry_dot_telemetry__pb2.SetRateRcStatusRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateRcStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateActuatorControlTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorControlTarget',
            telemetry_dot_telemetry__pb2.SetRateActuatorControlTargetRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateActuatorControlTargetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateActuatorOutputStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorOutputStatus',
            telemetry_dot_telemetry__pb2.SetRateActuatorOutputStatusRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateActuatorOutputStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateOdometry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateOdometry',
            telemetry_dot_telemetry__pb2.SetRateOdometryRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateOdometryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRatePositionVelocityNed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRatePositionVelocityNed',
            telemetry_dot_telemetry__pb2.SetRatePositionVelocityNedRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRatePositionVelocityNedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateGroundTruth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateGroundTruth',
            telemetry_dot_telemetry__pb2.SetRateGroundTruthRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateGroundTruthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateFixedwingMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateFixedwingMetrics',
            telemetry_dot_telemetry__pb2.SetRateFixedwingMetricsRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateFixedwingMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateImu',
            telemetry_dot_telemetry__pb2.SetRateImuRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateImuResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateScaledImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateScaledImu',
            telemetry_dot_telemetry__pb2.SetRateScaledImuRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateScaledImuResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateRawImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateRawImu',
            telemetry_dot_telemetry__pb2.SetRateRawImuRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateRawImuResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateUnixEpochTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateUnixEpochTime',
            telemetry_dot_telemetry__pb2.SetRateUnixEpochTimeRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateUnixEpochTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateDistanceSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateDistanceSensor',
            telemetry_dot_telemetry__pb2.SetRateDistanceSensorRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateDistanceSensorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRateAltitude(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/SetRateAltitude',
            telemetry_dot_telemetry__pb2.SetRateAltitudeRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.SetRateAltitudeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGpsGlobalOrigin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mavsdk.rpc.telemetry.TelemetryService/GetGpsGlobalOrigin',
            telemetry_dot_telemetry__pb2.GetGpsGlobalOriginRequest.SerializeToString,
            telemetry_dot_telemetry__pb2.GetGpsGlobalOriginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
