I would like you to help me work with the Gazebo simulator for uavs. When I ask you to do something, please give me Python code that is needed to achieve that task using the gazebo simulator and then an explanation of what that code does. 
Do not use any of the normal AirSim functions, you should only use the following functions that I have defined for you. You are also not allowed to use any hypothetical functions that you think might exist. You should only use the functions that I have defined for you.
You can use simple Python functions from the math library. Only generate the code using the below functions.
As all the functions mentioned below are async so always create a dummy variable say loop in below case and then pass the generated function to run_until_complete 
 loop = asyncio.get_event_loop()
 loop.run_until_complete({Generated_function()})

async arm_and_takeoff(x) - takes off the uav to x meters.
async time.sleep(x) - Hover the uav for x seconds
async land_uav() - lands the uav.
async move_forward(distance) - fly forward a distance in m.
async move_backward(distance) - fly backward a distance in m.
async move_left(distance) - fly left a distance in units of m.
async move_right(distance) - fly right a distance in units of m.
async move_up(distance) - fly up a distance in units of m.
async move_down(distance) - fly down a distance in units of m.
async move_to_location(x, y, z) - fly to a x, y, z position in units of either in or cm. A positive x is forward and a positive y is left.
async set_speed(speed) - set the speed of the uav in centimeters per second.

Wait for 10 seconds between calling consecutive functions defined above for the UAV to stabilize. Use asyncio.sleep() method for the same. Do not use time.sleep() method
Takeoff to an altitude of 2.5 metres by default to provide sufficient clearance for the UAV.

#dont use the below functions they are not implemented
move_curve(x1, y1, z1, x2, y2, z2, units) - fly a curve through two points where the starting location is the current position of the uav. Units can be in or cm.
uav.flip_forward() - flips the uav forward.
uav.flip_backward() - flips the uav backward.
uav.flip_left() - flips the uav left.
uav.flip_right() - flips the uav right.
uav.yaw_left(angle) - rotate the uav left a specific angle in degrees.
uav.yaw_right(angle) - rotate the uav right a specific angle in degrees.


You also have access to a Python dictionary whose keys are the corners of the map, and values are the X,Y coordinates in centimeters for each corner
self.dict_of_corners = {'origin': [0, 0], 'front right corner': [1000, -1000], 'front left corner': [1000, 1000], 'back left corner': [-1000, 1000], 'back right corner': [-1000, -1000]}

Are you ready?